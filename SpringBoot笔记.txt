1.
Springboot

@PathVariable  用于获取请求url中的参数，把URI template 中变量 ownerId的值和petId的值，
绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，
需要在@PathVariable("name")指定uri template中的名称。

@RequestParam  用于获取发起的请求中的参数，常用来处理简单类型的绑定，
通过Request.getParameter() 获取的String可直接转换为简单类型的情况。用于处理queryString中的变量

@RequestHeader  可以把Request请求header部分的值绑定到方法的参数上。

@ModelAttribute  用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后
台查询的model；用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：
A） @SessionAttributes 启用的attribute 对象上；
B） @ModelAttribute 用于方法上时指定的model对象；
C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。
不给定注解的情况下，默认：若要绑定的对象时简单类型：  调用@RequestParam来处理的。  
                          若要绑定的对象时复杂类型：  调用@ModelAttribute来处理的。
						  
@RequestMapping(value="/{id}", method=RequestMethod.PUT)value中{}用于绑定请求的参数

@Service用于标注业务层组件

@Repository用于标注数据访问组件，即DAO组件


2.
swagger2
@ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "用户ID", required = true, dataType = "Long", paramType = "path"),
            @ApiImplicitParam(name = "user", value = "用户详细实体user", required = true, dataType = "User")
    })
paramType：参数放在哪个地方
header-->请求参数的获取：@RequestHeader
query-->请求参数的获取：@RequestParam
path（用于restful接口）-->请求参数的获取：@PathVariable

3.
对于增、删、改操作相对变化较小。而对于“查”操作，我们往往需要进行多表关联，汇总计算等操作，
那么对于查询的结果往往就不再是简单的实体对象了，往往需要返回一个与数据库实体不同的包装类，
那么对于这类情况，就可以通过@Results和@Result注解来进行绑定
@Results({
    @Result(property = "name", column = "name"),
    @Result(property = "age", column = "age")
})
@Select("SELECT name, age FROM user")
List<User> findAll();

4.@ResponseBody后面可以接Map 实体类  object

5.Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").serializeNulls().create();
gson转对象为json时默认转换时间格式为yyyy-MM-dd HH:mm:ss可以通过setDateFormat设置转换格式，通过serializeNulls保留value值为空的key